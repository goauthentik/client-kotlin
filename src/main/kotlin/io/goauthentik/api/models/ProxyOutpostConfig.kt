/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.goauthentik.api.models

import io.goauthentik.api.models.OpenIDConnectConfiguration
import io.goauthentik.api.models.ProxyMode

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Proxy provider serializer for outposts
 *
 * @param pk 
 * @param name 
 * @param externalHost 
 * @param oidcConfiguration 
 * @param accessTokenValidity Get token validity as second count
 * @param scopesToRequest Get all the scope names the outpost should request, including custom-defined ones
 * @param assignedApplicationSlug Internal application name, used in URLs.
 * @param assignedApplicationName Application's display Name.
 * @param internalHost 
 * @param internalHostSslValidation Validate SSL Certificates of upstream servers
 * @param clientId 
 * @param clientSecret 
 * @param cookieSecret 
 * @param certificate 
 * @param skipPathRegex Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
 * @param basicAuthEnabled Set a custom HTTP-Basic Authentication header based on values from authentik.
 * @param basicAuthPasswordAttribute User/Group Attribute used for the password part of the HTTP-Basic Header.
 * @param basicAuthUserAttribute User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.
 * @param mode 
 * @param cookieDomain 
 * @param interceptHeaderAuth When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
 */


data class ProxyOutpostConfig (

    @Json(name = "pk")
    val pk: kotlin.Int,

    @Json(name = "name")
    val name: kotlin.String,

    @Json(name = "external_host")
    val externalHost: java.net.URI,

    @Json(name = "oidc_configuration")
    val oidcConfiguration: OpenIDConnectConfiguration,

    /* Get token validity as second count */
    @Json(name = "access_token_validity")
    val accessTokenValidity: kotlin.Double?,

    /* Get all the scope names the outpost should request, including custom-defined ones */
    @Json(name = "scopes_to_request")
    val scopesToRequest: kotlin.collections.List<kotlin.String>,

    /* Internal application name, used in URLs. */
    @Json(name = "assigned_application_slug")
    val assignedApplicationSlug: kotlin.String,

    /* Application's display Name. */
    @Json(name = "assigned_application_name")
    val assignedApplicationName: kotlin.String,

    @Json(name = "internal_host")
    val internalHost: java.net.URI? = null,

    /* Validate SSL Certificates of upstream servers */
    @Json(name = "internal_host_ssl_validation")
    val internalHostSslValidation: kotlin.Boolean? = null,

    @Json(name = "client_id")
    val clientId: kotlin.String? = null,

    @Json(name = "client_secret")
    val clientSecret: kotlin.String? = null,

    @Json(name = "cookie_secret")
    val cookieSecret: kotlin.String? = null,

    @Json(name = "certificate")
    val certificate: java.util.UUID? = null,

    /* Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression. */
    @Json(name = "skip_path_regex")
    val skipPathRegex: kotlin.String? = null,

    /* Set a custom HTTP-Basic Authentication header based on values from authentik. */
    @Json(name = "basic_auth_enabled")
    val basicAuthEnabled: kotlin.Boolean? = null,

    /* User/Group Attribute used for the password part of the HTTP-Basic Header. */
    @Json(name = "basic_auth_password_attribute")
    val basicAuthPasswordAttribute: kotlin.String? = null,

    /* User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used. */
    @Json(name = "basic_auth_user_attribute")
    val basicAuthUserAttribute: kotlin.String? = null,

    @Json(name = "mode")
    val mode: ProxyMode? = null,

    @Json(name = "cookie_domain")
    val cookieDomain: kotlin.String? = null,

    /* When enabled, this provider will intercept the authorization header and authenticate requests based on its value. */
    @Json(name = "intercept_header_auth")
    val interceptHeaderAuth: kotlin.Boolean? = null

)

