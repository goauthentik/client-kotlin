/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.goauthentik.api.models

import io.goauthentik.api.models.BindingTypeEnum
import io.goauthentik.api.models.DigestAlgorithmEnum
import io.goauthentik.api.models.NameIdPolicyEnum
import io.goauthentik.api.models.PolicyEngineMode
import io.goauthentik.api.models.SignatureAlgorithmEnum
import io.goauthentik.api.models.UserMatchingModeEnum

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * SAMLSource Serializer
 *
 * @param pk 
 * @param name Source's display Name.
 * @param slug Internal source name, used in URLs.
 * @param component Get object component so that we know how to edit the object
 * @param verboseName Return object's verbose_name
 * @param verboseNamePlural Return object's plural verbose_name
 * @param metaModelName Return internal model name
 * @param managed Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
 * @param icon Get the URL to the Icon. If the name is /static or starts with http it is returned as-is
 * @param preAuthenticationFlow Flow used before authentication.
 * @param ssoUrl URL that the initial Login request is sent to.
 * @param enabled 
 * @param authenticationFlow Flow to use when authenticating existing users.
 * @param enrollmentFlow Flow to use when enrolling new users.
 * @param policyEngineMode 
 * @param userMatchingMode 
 * @param userPathTemplate 
 * @param issuer Also known as Entity ID. Defaults the Metadata URL.
 * @param sloUrl Optional URL if your IDP supports Single-Logout.
 * @param allowIdpInitiated Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.
 * @param nameIdPolicy 
 * @param bindingType 
 * @param verificationKp When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
 * @param signingKp Keypair used to sign outgoing Responses going to the Identity Provider.
 * @param digestAlgorithm 
 * @param signatureAlgorithm 
 * @param temporaryUserDeleteAfter Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).
 */


data class SAMLSource (

    @Json(name = "pk")
    val pk: java.util.UUID,

    /* Source's display Name. */
    @Json(name = "name")
    val name: kotlin.String,

    /* Internal source name, used in URLs. */
    @Json(name = "slug")
    val slug: kotlin.String,

    /* Get object component so that we know how to edit the object */
    @Json(name = "component")
    val component: kotlin.String,

    /* Return object's verbose_name */
    @Json(name = "verbose_name")
    val verboseName: kotlin.String,

    /* Return object's plural verbose_name */
    @Json(name = "verbose_name_plural")
    val verboseNamePlural: kotlin.String,

    /* Return internal model name */
    @Json(name = "meta_model_name")
    val metaModelName: kotlin.String,

    /* Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update. */
    @Json(name = "managed")
    val managed: kotlin.String?,

    /* Get the URL to the Icon. If the name is /static or starts with http it is returned as-is */
    @Json(name = "icon")
    val icon: kotlin.String?,

    /* Flow used before authentication. */
    @Json(name = "pre_authentication_flow")
    val preAuthenticationFlow: java.util.UUID,

    /* URL that the initial Login request is sent to. */
    @Json(name = "sso_url")
    val ssoUrl: java.net.URI,

    @Json(name = "enabled")
    val enabled: kotlin.Boolean? = null,

    /* Flow to use when authenticating existing users. */
    @Json(name = "authentication_flow")
    val authenticationFlow: java.util.UUID? = null,

    /* Flow to use when enrolling new users. */
    @Json(name = "enrollment_flow")
    val enrollmentFlow: java.util.UUID? = null,

    @Json(name = "policy_engine_mode")
    val policyEngineMode: PolicyEngineMode? = null,

    @Json(name = "user_matching_mode")
    val userMatchingMode: UserMatchingModeEnum? = null,

    @Json(name = "user_path_template")
    val userPathTemplate: kotlin.String? = null,

    /* Also known as Entity ID. Defaults the Metadata URL. */
    @Json(name = "issuer")
    val issuer: kotlin.String? = null,

    /* Optional URL if your IDP supports Single-Logout. */
    @Json(name = "slo_url")
    val sloUrl: java.net.URI? = null,

    /* Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done. */
    @Json(name = "allow_idp_initiated")
    val allowIdpInitiated: kotlin.Boolean? = null,

    @Json(name = "name_id_policy")
    val nameIdPolicy: NameIdPolicyEnum? = null,

    @Json(name = "binding_type")
    val bindingType: BindingTypeEnum? = null,

    /* When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default. */
    @Json(name = "verification_kp")
    val verificationKp: java.util.UUID? = null,

    /* Keypair used to sign outgoing Responses going to the Identity Provider. */
    @Json(name = "signing_kp")
    val signingKp: java.util.UUID? = null,

    @Json(name = "digest_algorithm")
    val digestAlgorithm: DigestAlgorithmEnum? = null,

    @Json(name = "signature_algorithm")
    val signatureAlgorithm: SignatureAlgorithmEnum? = null,

    /* Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3). */
    @Json(name = "temporary_user_delete_after")
    val temporaryUserDeleteAfter: kotlin.String? = null

)

