/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.goauthentik.api.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.goauthentik.api.models.Domain
import io.goauthentik.api.models.DomainRequest
import io.goauthentik.api.models.GenericError
import io.goauthentik.api.models.PaginatedDomainList
import io.goauthentik.api.models.PaginatedTenantList
import io.goauthentik.api.models.PatchedDomainRequest
import io.goauthentik.api.models.PatchedTenantRequest
import io.goauthentik.api.models.Tenant
import io.goauthentik.api.models.TenantAdminGroupRequestRequest
import io.goauthentik.api.models.TenantRecoveryKeyRequestRequest
import io.goauthentik.api.models.TenantRecoveryKeyResponse
import io.goauthentik.api.models.TenantRequest
import io.goauthentik.api.models.ValidationError

import com.squareup.moshi.Json

import io.goauthentik.api.infrastructure.ApiClient
import io.goauthentik.api.infrastructure.ApiResponse
import io.goauthentik.api.infrastructure.ClientException
import io.goauthentik.api.infrastructure.ClientError
import io.goauthentik.api.infrastructure.ServerException
import io.goauthentik.api.infrastructure.ServerError
import io.goauthentik.api.infrastructure.MultiValueMap
import io.goauthentik.api.infrastructure.PartConfig
import io.goauthentik.api.infrastructure.RequestConfig
import io.goauthentik.api.infrastructure.RequestMethod
import io.goauthentik.api.infrastructure.ResponseType
import io.goauthentik.api.infrastructure.Success
import io.goauthentik.api.infrastructure.toMultiValue

class TenantsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost/api/v3")
        }
    }

    /**
     * 
     * Domain ViewSet
     * @param domainRequest 
     * @return Domain
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsDomainsCreate(domainRequest: DomainRequest) : Domain {
        val localVarResponse = tenantsDomainsCreateWithHttpInfo(domainRequest = domainRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Domain
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Domain ViewSet
     * @param domainRequest 
     * @return ApiResponse<Domain?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsDomainsCreateWithHttpInfo(domainRequest: DomainRequest) : ApiResponse<Domain?> {
        val localVariableConfig = tenantsDomainsCreateRequestConfig(domainRequest = domainRequest)

        return request<DomainRequest, Domain>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsDomainsCreate
     *
     * @param domainRequest 
     * @return RequestConfig
     */
    fun tenantsDomainsCreateRequestConfig(domainRequest: DomainRequest) : RequestConfig<DomainRequest> {
        val localVariableBody = domainRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/tenants/domains/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Domain ViewSet
     * @param id A unique integer value identifying this Domain.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsDomainsDestroy(id: kotlin.Int) : Unit {
        val localVarResponse = tenantsDomainsDestroyWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Domain ViewSet
     * @param id A unique integer value identifying this Domain.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsDomainsDestroyWithHttpInfo(id: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = tenantsDomainsDestroyRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsDomainsDestroy
     *
     * @param id A unique integer value identifying this Domain.
     * @return RequestConfig
     */
    fun tenantsDomainsDestroyRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/tenants/domains/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Domain ViewSet
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedDomainList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsDomainsList(ordering: kotlin.String? = null, page: kotlin.Int? = null, pageSize: kotlin.Int? = null, search: kotlin.String? = null) : PaginatedDomainList {
        val localVarResponse = tenantsDomainsListWithHttpInfo(ordering = ordering, page = page, pageSize = pageSize, search = search)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedDomainList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Domain ViewSet
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse<PaginatedDomainList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsDomainsListWithHttpInfo(ordering: kotlin.String?, page: kotlin.Int?, pageSize: kotlin.Int?, search: kotlin.String?) : ApiResponse<PaginatedDomainList?> {
        val localVariableConfig = tenantsDomainsListRequestConfig(ordering = ordering, page = page, pageSize = pageSize, search = search)

        return request<Unit, PaginatedDomainList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsDomainsList
     *
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return RequestConfig
     */
    fun tenantsDomainsListRequestConfig(ordering: kotlin.String?, page: kotlin.Int?, pageSize: kotlin.Int?, search: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (ordering != null) {
                    put("ordering", listOf(ordering.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (search != null) {
                    put("search", listOf(search.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tenants/domains/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Domain ViewSet
     * @param id A unique integer value identifying this Domain.
     * @param patchedDomainRequest  (optional)
     * @return Domain
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsDomainsPartialUpdate(id: kotlin.Int, patchedDomainRequest: PatchedDomainRequest? = null) : Domain {
        val localVarResponse = tenantsDomainsPartialUpdateWithHttpInfo(id = id, patchedDomainRequest = patchedDomainRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Domain
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Domain ViewSet
     * @param id A unique integer value identifying this Domain.
     * @param patchedDomainRequest  (optional)
     * @return ApiResponse<Domain?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsDomainsPartialUpdateWithHttpInfo(id: kotlin.Int, patchedDomainRequest: PatchedDomainRequest?) : ApiResponse<Domain?> {
        val localVariableConfig = tenantsDomainsPartialUpdateRequestConfig(id = id, patchedDomainRequest = patchedDomainRequest)

        return request<PatchedDomainRequest, Domain>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsDomainsPartialUpdate
     *
     * @param id A unique integer value identifying this Domain.
     * @param patchedDomainRequest  (optional)
     * @return RequestConfig
     */
    fun tenantsDomainsPartialUpdateRequestConfig(id: kotlin.Int, patchedDomainRequest: PatchedDomainRequest?) : RequestConfig<PatchedDomainRequest> {
        val localVariableBody = patchedDomainRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/tenants/domains/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Domain ViewSet
     * @param id A unique integer value identifying this Domain.
     * @return Domain
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsDomainsRetrieve(id: kotlin.Int) : Domain {
        val localVarResponse = tenantsDomainsRetrieveWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Domain
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Domain ViewSet
     * @param id A unique integer value identifying this Domain.
     * @return ApiResponse<Domain?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsDomainsRetrieveWithHttpInfo(id: kotlin.Int) : ApiResponse<Domain?> {
        val localVariableConfig = tenantsDomainsRetrieveRequestConfig(id = id)

        return request<Unit, Domain>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsDomainsRetrieve
     *
     * @param id A unique integer value identifying this Domain.
     * @return RequestConfig
     */
    fun tenantsDomainsRetrieveRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tenants/domains/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Domain ViewSet
     * @param id A unique integer value identifying this Domain.
     * @param domainRequest 
     * @return Domain
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsDomainsUpdate(id: kotlin.Int, domainRequest: DomainRequest) : Domain {
        val localVarResponse = tenantsDomainsUpdateWithHttpInfo(id = id, domainRequest = domainRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Domain
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Domain ViewSet
     * @param id A unique integer value identifying this Domain.
     * @param domainRequest 
     * @return ApiResponse<Domain?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsDomainsUpdateWithHttpInfo(id: kotlin.Int, domainRequest: DomainRequest) : ApiResponse<Domain?> {
        val localVariableConfig = tenantsDomainsUpdateRequestConfig(id = id, domainRequest = domainRequest)

        return request<DomainRequest, Domain>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsDomainsUpdate
     *
     * @param id A unique integer value identifying this Domain.
     * @param domainRequest 
     * @return RequestConfig
     */
    fun tenantsDomainsUpdateRequestConfig(id: kotlin.Int, domainRequest: DomainRequest) : RequestConfig<DomainRequest> {
        val localVariableBody = domainRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/tenants/domains/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Tenant Viewset
     * @param tenantRequest 
     * @return Tenant
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsTenantsCreate(tenantRequest: TenantRequest) : Tenant {
        val localVarResponse = tenantsTenantsCreateWithHttpInfo(tenantRequest = tenantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Tenant
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Tenant Viewset
     * @param tenantRequest 
     * @return ApiResponse<Tenant?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsTenantsCreateWithHttpInfo(tenantRequest: TenantRequest) : ApiResponse<Tenant?> {
        val localVariableConfig = tenantsTenantsCreateRequestConfig(tenantRequest = tenantRequest)

        return request<TenantRequest, Tenant>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsTenantsCreate
     *
     * @param tenantRequest 
     * @return RequestConfig
     */
    fun tenantsTenantsCreateRequestConfig(tenantRequest: TenantRequest) : RequestConfig<TenantRequest> {
        val localVariableBody = tenantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/tenants/tenants/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Create admin group and add user to it.
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param tenantAdminGroupRequestRequest 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsTenantsCreateAdminGroupCreate(tenantUuid: java.util.UUID, tenantAdminGroupRequestRequest: TenantAdminGroupRequestRequest) : Unit {
        val localVarResponse = tenantsTenantsCreateAdminGroupCreateWithHttpInfo(tenantUuid = tenantUuid, tenantAdminGroupRequestRequest = tenantAdminGroupRequestRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Create admin group and add user to it.
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param tenantAdminGroupRequestRequest 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsTenantsCreateAdminGroupCreateWithHttpInfo(tenantUuid: java.util.UUID, tenantAdminGroupRequestRequest: TenantAdminGroupRequestRequest) : ApiResponse<Unit?> {
        val localVariableConfig = tenantsTenantsCreateAdminGroupCreateRequestConfig(tenantUuid = tenantUuid, tenantAdminGroupRequestRequest = tenantAdminGroupRequestRequest)

        return request<TenantAdminGroupRequestRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsTenantsCreateAdminGroupCreate
     *
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param tenantAdminGroupRequestRequest 
     * @return RequestConfig
     */
    fun tenantsTenantsCreateAdminGroupCreateRequestConfig(tenantUuid: java.util.UUID, tenantAdminGroupRequestRequest: TenantAdminGroupRequestRequest) : RequestConfig<TenantAdminGroupRequestRequest> {
        val localVariableBody = tenantAdminGroupRequestRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/tenants/tenants/{tenant_uuid}/create_admin_group/".replace("{"+"tenant_uuid"+"}", encodeURIComponent(tenantUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Create recovery key for user.
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param tenantRecoveryKeyRequestRequest 
     * @return TenantRecoveryKeyResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsTenantsCreateRecoveryKeyCreate(tenantUuid: java.util.UUID, tenantRecoveryKeyRequestRequest: TenantRecoveryKeyRequestRequest) : TenantRecoveryKeyResponse {
        val localVarResponse = tenantsTenantsCreateRecoveryKeyCreateWithHttpInfo(tenantUuid = tenantUuid, tenantRecoveryKeyRequestRequest = tenantRecoveryKeyRequestRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TenantRecoveryKeyResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Create recovery key for user.
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param tenantRecoveryKeyRequestRequest 
     * @return ApiResponse<TenantRecoveryKeyResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsTenantsCreateRecoveryKeyCreateWithHttpInfo(tenantUuid: java.util.UUID, tenantRecoveryKeyRequestRequest: TenantRecoveryKeyRequestRequest) : ApiResponse<TenantRecoveryKeyResponse?> {
        val localVariableConfig = tenantsTenantsCreateRecoveryKeyCreateRequestConfig(tenantUuid = tenantUuid, tenantRecoveryKeyRequestRequest = tenantRecoveryKeyRequestRequest)

        return request<TenantRecoveryKeyRequestRequest, TenantRecoveryKeyResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsTenantsCreateRecoveryKeyCreate
     *
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param tenantRecoveryKeyRequestRequest 
     * @return RequestConfig
     */
    fun tenantsTenantsCreateRecoveryKeyCreateRequestConfig(tenantUuid: java.util.UUID, tenantRecoveryKeyRequestRequest: TenantRecoveryKeyRequestRequest) : RequestConfig<TenantRecoveryKeyRequestRequest> {
        val localVariableBody = tenantRecoveryKeyRequestRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/tenants/tenants/{tenant_uuid}/create_recovery_key/".replace("{"+"tenant_uuid"+"}", encodeURIComponent(tenantUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Tenant Viewset
     * @param tenantUuid A UUID string identifying this Tenant.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsTenantsDestroy(tenantUuid: java.util.UUID) : Unit {
        val localVarResponse = tenantsTenantsDestroyWithHttpInfo(tenantUuid = tenantUuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Tenant Viewset
     * @param tenantUuid A UUID string identifying this Tenant.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsTenantsDestroyWithHttpInfo(tenantUuid: java.util.UUID) : ApiResponse<Unit?> {
        val localVariableConfig = tenantsTenantsDestroyRequestConfig(tenantUuid = tenantUuid)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsTenantsDestroy
     *
     * @param tenantUuid A UUID string identifying this Tenant.
     * @return RequestConfig
     */
    fun tenantsTenantsDestroyRequestConfig(tenantUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/tenants/tenants/{tenant_uuid}/".replace("{"+"tenant_uuid"+"}", encodeURIComponent(tenantUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Tenant Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedTenantList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsTenantsList(ordering: kotlin.String? = null, page: kotlin.Int? = null, pageSize: kotlin.Int? = null, search: kotlin.String? = null) : PaginatedTenantList {
        val localVarResponse = tenantsTenantsListWithHttpInfo(ordering = ordering, page = page, pageSize = pageSize, search = search)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedTenantList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Tenant Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse<PaginatedTenantList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsTenantsListWithHttpInfo(ordering: kotlin.String?, page: kotlin.Int?, pageSize: kotlin.Int?, search: kotlin.String?) : ApiResponse<PaginatedTenantList?> {
        val localVariableConfig = tenantsTenantsListRequestConfig(ordering = ordering, page = page, pageSize = pageSize, search = search)

        return request<Unit, PaginatedTenantList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsTenantsList
     *
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return RequestConfig
     */
    fun tenantsTenantsListRequestConfig(ordering: kotlin.String?, page: kotlin.Int?, pageSize: kotlin.Int?, search: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (ordering != null) {
                    put("ordering", listOf(ordering.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (search != null) {
                    put("search", listOf(search.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tenants/tenants/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Tenant Viewset
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param patchedTenantRequest  (optional)
     * @return Tenant
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsTenantsPartialUpdate(tenantUuid: java.util.UUID, patchedTenantRequest: PatchedTenantRequest? = null) : Tenant {
        val localVarResponse = tenantsTenantsPartialUpdateWithHttpInfo(tenantUuid = tenantUuid, patchedTenantRequest = patchedTenantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Tenant
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Tenant Viewset
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param patchedTenantRequest  (optional)
     * @return ApiResponse<Tenant?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsTenantsPartialUpdateWithHttpInfo(tenantUuid: java.util.UUID, patchedTenantRequest: PatchedTenantRequest?) : ApiResponse<Tenant?> {
        val localVariableConfig = tenantsTenantsPartialUpdateRequestConfig(tenantUuid = tenantUuid, patchedTenantRequest = patchedTenantRequest)

        return request<PatchedTenantRequest, Tenant>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsTenantsPartialUpdate
     *
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param patchedTenantRequest  (optional)
     * @return RequestConfig
     */
    fun tenantsTenantsPartialUpdateRequestConfig(tenantUuid: java.util.UUID, patchedTenantRequest: PatchedTenantRequest?) : RequestConfig<PatchedTenantRequest> {
        val localVariableBody = patchedTenantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/tenants/tenants/{tenant_uuid}/".replace("{"+"tenant_uuid"+"}", encodeURIComponent(tenantUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Tenant Viewset
     * @param tenantUuid A UUID string identifying this Tenant.
     * @return Tenant
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsTenantsRetrieve(tenantUuid: java.util.UUID) : Tenant {
        val localVarResponse = tenantsTenantsRetrieveWithHttpInfo(tenantUuid = tenantUuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Tenant
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Tenant Viewset
     * @param tenantUuid A UUID string identifying this Tenant.
     * @return ApiResponse<Tenant?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsTenantsRetrieveWithHttpInfo(tenantUuid: java.util.UUID) : ApiResponse<Tenant?> {
        val localVariableConfig = tenantsTenantsRetrieveRequestConfig(tenantUuid = tenantUuid)

        return request<Unit, Tenant>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsTenantsRetrieve
     *
     * @param tenantUuid A UUID string identifying this Tenant.
     * @return RequestConfig
     */
    fun tenantsTenantsRetrieveRequestConfig(tenantUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tenants/tenants/{tenant_uuid}/".replace("{"+"tenant_uuid"+"}", encodeURIComponent(tenantUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Tenant Viewset
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param tenantRequest 
     * @return Tenant
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tenantsTenantsUpdate(tenantUuid: java.util.UUID, tenantRequest: TenantRequest) : Tenant {
        val localVarResponse = tenantsTenantsUpdateWithHttpInfo(tenantUuid = tenantUuid, tenantRequest = tenantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Tenant
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Tenant Viewset
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param tenantRequest 
     * @return ApiResponse<Tenant?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tenantsTenantsUpdateWithHttpInfo(tenantUuid: java.util.UUID, tenantRequest: TenantRequest) : ApiResponse<Tenant?> {
        val localVariableConfig = tenantsTenantsUpdateRequestConfig(tenantUuid = tenantUuid, tenantRequest = tenantRequest)

        return request<TenantRequest, Tenant>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tenantsTenantsUpdate
     *
     * @param tenantUuid A UUID string identifying this Tenant.
     * @param tenantRequest 
     * @return RequestConfig
     */
    fun tenantsTenantsUpdateRequestConfig(tenantUuid: java.util.UUID, tenantRequest: TenantRequest) : RequestConfig<TenantRequest> {
        val localVariableBody = tenantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/tenants/tenants/{tenant_uuid}/".replace("{"+"tenant_uuid"+"}", encodeURIComponent(tenantUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
