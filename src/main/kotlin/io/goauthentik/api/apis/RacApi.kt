/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.goauthentik.api.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.goauthentik.api.models.Endpoint
import io.goauthentik.api.models.EndpointRequest
import io.goauthentik.api.models.GenericError
import io.goauthentik.api.models.PaginatedEndpointList
import io.goauthentik.api.models.PatchedEndpointRequest
import io.goauthentik.api.models.UsedBy
import io.goauthentik.api.models.ValidationError

import com.squareup.moshi.Json

import io.goauthentik.api.infrastructure.ApiClient
import io.goauthentik.api.infrastructure.ApiResponse
import io.goauthentik.api.infrastructure.ClientException
import io.goauthentik.api.infrastructure.ClientError
import io.goauthentik.api.infrastructure.ServerException
import io.goauthentik.api.infrastructure.ServerError
import io.goauthentik.api.infrastructure.MultiValueMap
import io.goauthentik.api.infrastructure.PartConfig
import io.goauthentik.api.infrastructure.RequestConfig
import io.goauthentik.api.infrastructure.RequestMethod
import io.goauthentik.api.infrastructure.ResponseType
import io.goauthentik.api.infrastructure.Success
import io.goauthentik.api.infrastructure.toMultiValue

class RacApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost/api/v3")
        }
    }

    /**
     * 
     * Endpoint Viewset
     * @param endpointRequest 
     * @return Endpoint
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun racEndpointsCreate(endpointRequest: EndpointRequest) : Endpoint {
        val localVarResponse = racEndpointsCreateWithHttpInfo(endpointRequest = endpointRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Endpoint
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Endpoint Viewset
     * @param endpointRequest 
     * @return ApiResponse<Endpoint?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun racEndpointsCreateWithHttpInfo(endpointRequest: EndpointRequest) : ApiResponse<Endpoint?> {
        val localVariableConfig = racEndpointsCreateRequestConfig(endpointRequest = endpointRequest)

        return request<EndpointRequest, Endpoint>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation racEndpointsCreate
     *
     * @param endpointRequest 
     * @return RequestConfig
     */
    fun racEndpointsCreateRequestConfig(endpointRequest: EndpointRequest) : RequestConfig<EndpointRequest> {
        val localVariableBody = endpointRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rac/endpoints/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun racEndpointsDestroy(pbmUuid: java.util.UUID) : Unit {
        val localVarResponse = racEndpointsDestroyWithHttpInfo(pbmUuid = pbmUuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun racEndpointsDestroyWithHttpInfo(pbmUuid: java.util.UUID) : ApiResponse<Unit?> {
        val localVariableConfig = racEndpointsDestroyRequestConfig(pbmUuid = pbmUuid)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation racEndpointsDestroy
     *
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @return RequestConfig
     */
    fun racEndpointsDestroyRequestConfig(pbmUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rac/endpoints/{pbm_uuid}/".replace("{"+"pbm_uuid"+"}", encodeURIComponent(pbmUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * List accessible endpoints
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search  (optional)
     * @param superuserFullList  (optional)
     * @return PaginatedEndpointList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun racEndpointsList(name: kotlin.String? = null, ordering: kotlin.String? = null, page: kotlin.Int? = null, pageSize: kotlin.Int? = null, provider: kotlin.Int? = null, search: kotlin.String? = null, superuserFullList: kotlin.Boolean? = null) : PaginatedEndpointList {
        val localVarResponse = racEndpointsListWithHttpInfo(name = name, ordering = ordering, page = page, pageSize = pageSize, provider = provider, search = search, superuserFullList = superuserFullList)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedEndpointList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * List accessible endpoints
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search  (optional)
     * @param superuserFullList  (optional)
     * @return ApiResponse<PaginatedEndpointList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun racEndpointsListWithHttpInfo(name: kotlin.String?, ordering: kotlin.String?, page: kotlin.Int?, pageSize: kotlin.Int?, provider: kotlin.Int?, search: kotlin.String?, superuserFullList: kotlin.Boolean?) : ApiResponse<PaginatedEndpointList?> {
        val localVariableConfig = racEndpointsListRequestConfig(name = name, ordering = ordering, page = page, pageSize = pageSize, provider = provider, search = search, superuserFullList = superuserFullList)

        return request<Unit, PaginatedEndpointList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation racEndpointsList
     *
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search  (optional)
     * @param superuserFullList  (optional)
     * @return RequestConfig
     */
    fun racEndpointsListRequestConfig(name: kotlin.String?, ordering: kotlin.String?, page: kotlin.Int?, pageSize: kotlin.Int?, provider: kotlin.Int?, search: kotlin.String?, superuserFullList: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (ordering != null) {
                    put("ordering", listOf(ordering.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (provider != null) {
                    put("provider", listOf(provider.toString()))
                }
                if (search != null) {
                    put("search", listOf(search.toString()))
                }
                if (superuserFullList != null) {
                    put("superuser_full_list", listOf(superuserFullList.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rac/endpoints/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @param patchedEndpointRequest  (optional)
     * @return Endpoint
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun racEndpointsPartialUpdate(pbmUuid: java.util.UUID, patchedEndpointRequest: PatchedEndpointRequest? = null) : Endpoint {
        val localVarResponse = racEndpointsPartialUpdateWithHttpInfo(pbmUuid = pbmUuid, patchedEndpointRequest = patchedEndpointRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Endpoint
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @param patchedEndpointRequest  (optional)
     * @return ApiResponse<Endpoint?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun racEndpointsPartialUpdateWithHttpInfo(pbmUuid: java.util.UUID, patchedEndpointRequest: PatchedEndpointRequest?) : ApiResponse<Endpoint?> {
        val localVariableConfig = racEndpointsPartialUpdateRequestConfig(pbmUuid = pbmUuid, patchedEndpointRequest = patchedEndpointRequest)

        return request<PatchedEndpointRequest, Endpoint>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation racEndpointsPartialUpdate
     *
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @param patchedEndpointRequest  (optional)
     * @return RequestConfig
     */
    fun racEndpointsPartialUpdateRequestConfig(pbmUuid: java.util.UUID, patchedEndpointRequest: PatchedEndpointRequest?) : RequestConfig<PatchedEndpointRequest> {
        val localVariableBody = patchedEndpointRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/rac/endpoints/{pbm_uuid}/".replace("{"+"pbm_uuid"+"}", encodeURIComponent(pbmUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @return Endpoint
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun racEndpointsRetrieve(pbmUuid: java.util.UUID) : Endpoint {
        val localVarResponse = racEndpointsRetrieveWithHttpInfo(pbmUuid = pbmUuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Endpoint
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @return ApiResponse<Endpoint?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun racEndpointsRetrieveWithHttpInfo(pbmUuid: java.util.UUID) : ApiResponse<Endpoint?> {
        val localVariableConfig = racEndpointsRetrieveRequestConfig(pbmUuid = pbmUuid)

        return request<Unit, Endpoint>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation racEndpointsRetrieve
     *
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @return RequestConfig
     */
    fun racEndpointsRetrieveRequestConfig(pbmUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rac/endpoints/{pbm_uuid}/".replace("{"+"pbm_uuid"+"}", encodeURIComponent(pbmUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @param endpointRequest 
     * @return Endpoint
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun racEndpointsUpdate(pbmUuid: java.util.UUID, endpointRequest: EndpointRequest) : Endpoint {
        val localVarResponse = racEndpointsUpdateWithHttpInfo(pbmUuid = pbmUuid, endpointRequest = endpointRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Endpoint
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @param endpointRequest 
     * @return ApiResponse<Endpoint?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun racEndpointsUpdateWithHttpInfo(pbmUuid: java.util.UUID, endpointRequest: EndpointRequest) : ApiResponse<Endpoint?> {
        val localVariableConfig = racEndpointsUpdateRequestConfig(pbmUuid = pbmUuid, endpointRequest = endpointRequest)

        return request<EndpointRequest, Endpoint>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation racEndpointsUpdate
     *
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @param endpointRequest 
     * @return RequestConfig
     */
    fun racEndpointsUpdateRequestConfig(pbmUuid: java.util.UUID, endpointRequest: EndpointRequest) : RequestConfig<EndpointRequest> {
        val localVariableBody = endpointRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rac/endpoints/{pbm_uuid}/".replace("{"+"pbm_uuid"+"}", encodeURIComponent(pbmUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @return kotlin.collections.List<UsedBy>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun racEndpointsUsedByList(pbmUuid: java.util.UUID) : kotlin.collections.List<UsedBy> {
        val localVarResponse = racEndpointsUsedByListWithHttpInfo(pbmUuid = pbmUuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<UsedBy>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @return ApiResponse<kotlin.collections.List<UsedBy>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun racEndpointsUsedByListWithHttpInfo(pbmUuid: java.util.UUID) : ApiResponse<kotlin.collections.List<UsedBy>?> {
        val localVariableConfig = racEndpointsUsedByListRequestConfig(pbmUuid = pbmUuid)

        return request<Unit, kotlin.collections.List<UsedBy>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation racEndpointsUsedByList
     *
     * @param pbmUuid A UUID string identifying this RAC Endpoint.
     * @return RequestConfig
     */
    fun racEndpointsUsedByListRequestConfig(pbmUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rac/endpoints/{pbm_uuid}/used_by/".replace("{"+"pbm_uuid"+"}", encodeURIComponent(pbmUuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
